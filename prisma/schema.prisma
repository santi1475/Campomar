generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tipoempleado {
  TipoEmpleadoID Int         @id @default(autoincrement())
  Descripcion    String?     @db.VarChar(50)
  empleados      empleados[]
}

model empleados {
  EmpleadoID     Int           @id @default(autoincrement())
  Nombre         String?       @db.VarChar(100)
  TipoEmpleadoID Int?
  DNI            String?       @unique @db.Char(8)
  Password       String?       @db.VarChar(255)
  tipoempleado   tipoempleado? @relation(fields: [TipoEmpleadoID], references: [TipoEmpleadoID], onDelete: SetNull, onUpdate: Cascade)
  pedidos        pedidos[]
}

model categorias {
  CategoriaID Int      @id @default(autoincrement())
  Descripcion String   @db.VarChar(255)
  platos      platos[]
}

model platos {
  PlatoID        Int              @id @default(autoincrement())
  Descripcion    String?          @db.VarChar(255)
  Precio         Decimal?         @db.Decimal(10, 2)
  CategoriaID    Int?
  categorias     categorias?      @relation(fields: [CategoriaID], references: [CategoriaID], onDelete: SetNull, onUpdate: Cascade)
  detallepedidos detallepedidos[]
}

model tipopago {
  TipoPagoID  Int       @id @default(autoincrement())
  Descripcion String?   @db.VarChar(45)
  pedidos     pedidos[]
}

model pedidos {
  PedidoID       Int              @id @default(autoincrement())
  EmpleadoID     Int?
  Fecha          DateTime         @default(now()) @db.Timestamp(3)
  Total          Decimal          @default(0) @db.Decimal(10, 2)
  Estado         Boolean          @default(true) // <- CORRECCIÃ“N PRINCIPAL
  TipoPago       Int?
  empleados      empleados?       @relation(fields: [EmpleadoID], references: [EmpleadoID], onDelete: SetNull, onUpdate: Cascade)
  tipopago       tipopago?        @relation(fields: [TipoPago], references: [TipoPagoID], onDelete: SetNull, onUpdate: Cascade)
  detallepedidos detallepedidos[]
  pedido_mesas   pedido_mesas[]
}

model detallepedidos {
  DetalleID Int     @id @default(autoincrement())
  PedidoID  Int
  PlatoID   Int
  Cantidad  Int
  pedidos   pedidos @relation(fields: [PedidoID], references: [PedidoID], onDelete: Cascade, onUpdate: Cascade)
  platos    platos  @relation(fields: [PlatoID], references: [PlatoID], onDelete: Restrict, onUpdate: Cascade)
}

model mesas {
  MesaID       Int            @id @default(autoincrement())
  NumeroMesa   Int
  Estado       String         @default("Libre") @db.VarChar(10)
  pedido_mesas pedido_mesas[]
}

model pedido_mesas {
  id       Int   @id @default(autoincrement())
  PedidoID Int
  MesaID   Int
  pedidos  pedidos @relation(fields: [PedidoID], references: [PedidoID], onDelete: Cascade, onUpdate: Cascade)
  mesas    mesas   @relation(fields: [MesaID], references: [MesaID], onDelete: Cascade, onUpdate: Cascade)
}