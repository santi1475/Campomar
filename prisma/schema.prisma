// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model auditoria {
  AuditoriaID   Int       @id @default(autoincrement())
  Operacion     String?   @db.VarChar(10)
  TablaAfectada String?   @db.VarChar(50)
  IDAfectado    Int?
  Fecha         DateTime? @default(now()) @db.Timestamp(0)
  Usuario       String?   @db.VarChar(50)
}

model empleados {
  EmpleadoID     Int       @id @default(autoincrement())
  Nombre         String?   @db.VarChar(100)
  TipoEmpleadoID Int?
  DNI            String?   @unique(map: "DNI_UNIQUE") @db.Char(8)
  Password       String?   @db.VarChar(255)
  Activo         Boolean   @default(true) // <-- CAMPO AÑADIDO
  tipoempleado   tipoempleado? @relation(fields: [TipoEmpleadoID], references: [TipoEmpleadoID], onDelete: NoAction, onUpdate: NoAction, map: "empleados_ibfk_1")
  pedidos        pedidos[]

  @@index([TipoEmpleadoID], map: "TipoEmpleadoID")
}

model pedidos {
  PedidoID       Int              @id @default(autoincrement())
  EmpleadoID     Int?
  Fecha          DateTime         @db.Timestamp(0)
  Total          Decimal          @default(0.00) @db.Decimal(10, 2)
  Estado         Boolean          @default(true)
  TipoPago       Int?
  empleados      empleados?       @relation(fields: [EmpleadoID], references: [EmpleadoID], onDelete: NoAction, onUpdate: NoAction)
  detallepedidos detallepedidos[]
  pedido_mesas   pedido_mesas[]
  tipopago       tipopago?        @relation(fields: [TipoPago], references: [TipoPagoID], onDelete: NoAction, onUpdate: NoAction)

  @@index([EmpleadoID], map: "idx_EmpleadoID")
  @@index([TipoPago], map: "pedidos_ibfk_3_idx")
}

model platos {
  PlatoID        Int              @id @default(autoincrement())
  Descripcion    String?          @db.VarChar(255)
  Precio         Decimal?         @db.Decimal(10, 2)
  CategoriaID    Int
  detallepedidos detallepedidos[]
  categorias     categorias       @relation(fields: [CategoriaID], references: [CategoriaID], onUpdate: NoAction)

  @@index([CategoriaID], map: "platos_ibfk_1_idx")
}

model tipoempleado {
  TipoEmpleadoID Int         @id @default(autoincrement())
  Descripcion    String?     @db.VarChar(50)
  empleados      empleados[]
}

model mesas {
  MesaID       Int            @id @default(autoincrement())
  NumeroMesa   Int
  Estado       String         @default("Libre") @db.VarChar(10)
  pedido_mesas pedido_mesas[]
}

// ============== MODELOS AÑADIDOS/CORREGIDOS ==============

model pedido_mesas {
  PedidoID Int
  MesaID   Int
  pedidos  pedidos @relation(fields: [PedidoID], references: [PedidoID], onDelete: Cascade)
  mesas    mesas   @relation(fields: [MesaID], references: [MesaID], onDelete: Cascade)

  @@id([PedidoID, MesaID])
  @@index([MesaID], map: "fk_mesa_idx")
}

model detallepedidos {
  DetalleID Int     @id @default(autoincrement())
  PedidoID  Int
  PlatoID   Int
  Cantidad  Int
  pedidos   pedidos @relation(fields: [PedidoID], references: [PedidoID], onDelete: Cascade)
  platos    platos  @relation(fields: [PlatoID], references: [PlatoID])

  @@index([PedidoID], map: "fk_pedido_idx")
  @@index([PlatoID], map: "fk_plato_idx")
}

model categorias {
  CategoriaID Int     @id @default(autoincrement())
  Descripcion String  @db.VarChar(50)
  platos      platos[]
}

model tipopago {
  TipoPagoID  Int     @id @default(autoincrement())
  Descripcion String  @db.VarChar(50)
  pedidos     pedidos[]
}
